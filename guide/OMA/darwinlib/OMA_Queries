module external GetOMAGroup, GetAllAll, GetOrthologs, LoadGenomeOffsets;
local GSID, G2IDX, omadb, NG;

ex_rels := [['ALL', {1,2,3,4,5,6,7,9}], ['ORTHOLOGS', {1,2,3,4}], 
            ['PARALOGS', {5,6,8,9}], ['BROKEN PAIRS', 5], ['BP PARALOG', 5], 
            ['SAME SPECIES PARALOGS', {6,9}], ['1:1 ORTHOLOGS', 1], ['1:M ORTHOLOG', 2], 
            ['N:1 ORTHOLOG', 3], ['N:M ORTHOLOG', 4], ['CLOSE SAME SPECIES PARALOG', 6], 
            ['ALTERNATIVE SPLICING', 7], ['DISTANT DIFFERENT SPECIES PARALOG', 8], 
            ['DISTANT SAME SPECIES PARALOG', 9]]:

ID2Tuple := proc(id:posint) option internal;
    g := SearchOrderedArray(id-1, GSID[1]);
    nr := id - GSID[1,g];
    if nr>GSID[3,g] then error('invalid id'); else [GSID[2,g],nr] fi:
end:

Tuple2ID := proc(g,nr) option internal;
    gNr := G2IDX[g];
    if nr>GSID[3,gNr] then error('protein '.nr.' does not exist for '.g);
    else nr+GSID[1,gNr] fi;
end:

LoadGenomeOffsets := proc(;(db='oma_current'):string)
    global GSID, NG, G2IDX, omadb, GSPOR;
    querry := sprintf('SELECT min(entry_id)-1, genome_5letter, max(entry_id) '.
              'from vpeikert.genome g, vpeikert.entry e, %s.usedgenome ug '.
              'where g.genome_id=e.entry_genome_id and '.
              ' ug.genome_id=g.genome_id '.
              'GROUP BY g.genome_id', db);
    res := MySql(querry,[1,3], 'database'=db);
    dat := res['Data']; NG := length(dat):
    for x to NG do dat[x,3] := dat[x,3]-dat[x,1]; od:
    
    omadb := db;
    GSID  := transpose(sort(dat));
    G2IDX := table(-1):
    for i to NG do G2IDX[dat[i,2]] := i od:
end:

GetOMAGroup := proc(grp:posint ; (db='oma_current'):string)
    querry := sprintf('SELECT oma_entry_id from %s.oma where oma_id=%d',db,grp);
    data := MySql(querry,[1])['Data'];
    return( zip(op(data)) );
end:

GetAllAll := proc( proteins:{list(posint), list([string,posint])} ; (db='oma_current'):string ) 
    if type(proteins[1], list) then 
        # we have to map the tuples to the ids
        if not assigned(GSID) or omadb<>db then LoadGenomeOffsets(db) fi:
        prts := [seq(Tuple2ID(op(z)), z=proteins)];
    else prts := proteins fi:
    nP := length(prts);
    order := sort([seq(i,i=1..nP)], x->prts[x]):
    prts := [op({op(prts)})];
    if length(prts)<>nP then error('proteins contain duplicates') fi:

    prtlist := ConcatStrings([seq(string(z),z=prts)], ',');
    querry := sprintf('SELECT allmatches_entry_id1, allmatches_entry_id2, allmatches_score, '.
        'allmatches_pamdist, allmatches_pamvariance, allmatches_range_start1, allmatches_range_end1, '.
        'allmatches_range_start2, allmatches_range_end2 FROM allmatches '.
        'WHERE allmatches_entry_id1 IN (%s) and allmatches_entry_id2 IN (%s)',
        prtlist, prtlist);
    res := MySql(querry, [1,2,3,4,5,6,7,8,9])['Data'];
    Dist := CreateArray(1..nP,1..nP):  Var := CreateArray(1..nP,1..nP): 
    Score := CreateArray(1..nP,1..nP): Range := CreateArray(1..nP,1..nP):
    
    for z in res do 
        p1 := SearchOrderedArray(z[1], prts);
        p2 := SearchOrderedArray(z[2], prts);
        i := order[p1]; j := order[p2];
        Score[i,j] := Score[j,i] := z[3];
        Dist[i,j]  := Dist[j,i] := z[4];
        Var[i,j]   := Var[j,i] := z[5];
        Range[i,j] := [z[6]..z[7],z[8]..z[9]];
        Range[j,i] := [z[8]..z[9],z[6]..z[7]];
    od:
    for i to nP do for j from i+1 to nP do if Score[i,j]=0 then 
        Score[i,j] := Score[j,i] := Dist[i,j] := Dist[j,i] := -1;
        Var[i,j] := Var[j,i] := Range[i,j] := Range[j,i] := -1;
    fi od od:

    return([ Score, Dist, Var, Range ]);
end:

GetHomologs := proc(protein:{string,[string,posint],posint} ; (db='oma_current'):string, 
       'types'=((types='ALL'):{string,list(string),set(string)}),
       'fmt'=((fmt='tuple'):{'tuple','number','label'}) )
    if type(types, string) then typ:=[uppercase(types)];
    elif type(types, set) then  typ:=zip(uppercase( [op(types)] ));
    else typ := zip(uppercase( types )) fi:
    
    for z in typ do if not member(z, ex_rels) then
        if not assigned(GSID) or omadb<>db then LoadGenomeOffsets(db) fi:
        querry := sprintf('select');
    fi od: 
end:




end: #module

